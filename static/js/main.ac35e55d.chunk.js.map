{"version":3,"sources":["ContactForm/ContactForm.js","Filter/Filter.js","ContactList/ContactList.js","App.js","index.js"],"names":["ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmit","preventDefault","props","onSubmit","reset","this","type","pattern","title","required","onChange","placeholder","Component","Filter","filter","ContactList","list","map","contact","contactId","uuidv4","onClick","deleteContact","id","App","contacts","prevState","formSubmitHandler","data","some","window","alert","changeFilter","currentTarget","filteredContacts","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gRAEMA,E,4MACJC,MAAQ,CACNC,KAAM,GACNC,OAAQ,I,EAGVC,aAAe,SAAAC,GACb,MAAwBA,EAAEC,OAAlBJ,EAAR,EAAQA,KAAMK,EAAd,EAAcA,MACd,EAAKC,SAAL,eACGN,EAAOK,K,EAIZE,aAAe,SAAAJ,GACbA,EAAEK,iBAEF,EAAKC,MAAMC,SAAS,EAAKX,OACzB,EAAKY,S,EAGPA,MAAQ,WACN,EAAKL,SAAS,CACZN,KAAM,GACNC,OAAQ,M,4CAIZ,WACE,OACE,uBAAMS,SAAUE,KAAKL,aAArB,UACE,yCAEE,uBACEM,KAAK,OACLb,KAAK,OACLc,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRX,MAAOO,KAAKb,MAAMC,KAClBiB,SAAUL,KAAKV,aACfgB,YAAY,6BAGhB,2CAEE,uBACEL,KAAK,MACLb,KAAK,SACLc,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRX,MAAOO,KAAKb,MAAME,OAClBgB,SAAUL,KAAKV,kBAGnB,wBAAQW,KAAK,SAASR,MAAM,8FAA5B,gC,GAvDkBc,aA+DXrB,IC/DTsB,E,4JACJ,WACE,OACE,8BACE,0DAEE,uBACEP,KAAK,OACLb,KAAK,SACLK,MAAOO,KAAKH,MAAMY,OAClBJ,SAAUL,KAAKH,MAAMQ,oB,GAVZE,aAkBNC,I,QCjBTE,E,4JACJ,WAAU,IAAD,OACP,OACE,6BACGV,KAAKH,MAAMc,KAAKC,KAAI,SAAAC,GACnB,IAAMC,EAAYC,cAElB,OACE,+BACGF,EAAQzB,KADX,KACmByB,EAAQxB,OACzB,wBAAQ2B,QAAS,kBAAM,EAAKnB,MAAMoB,cAAcJ,EAAQK,KAAxD,8BAFOJ,Y,GARKP,aAqBXG,IClBTS,E,4MACJhC,MAAQ,CACNiC,SAAU,GAMVX,OAAQ,I,EAGVQ,cAAgB,SAAAC,GACd,EAAKxB,UAAS,SAAA2B,GAAS,MAAK,CAC1BD,SAAUC,EAAUD,SAASX,QAAO,SAAAI,GAAO,OAAIA,EAAQK,KAAOA,U,EAIlEI,kBAAoB,SAAAC,GAClB,IAAQH,EAAa,EAAKjC,MAAlBiC,SACFN,EAAYC,cACJK,EAASI,MAAK,SAAAX,GAAO,OAAIA,EAAQzB,OAASmC,EAAKnC,QAG3DqC,OAAOC,MAAP,UAAgBH,EAAKnC,KAArB,4BAIF,EAAKM,UAAS,gBAAG0B,EAAH,EAAGA,SAAH,MAAmB,CAC/BA,SAAS,GAAD,mBAAMA,GAAN,4BAAqBG,GAArB,IAA2BL,GAAIJ,W,EAI3Ca,aAAe,SAAApC,GACb,EAAKG,SAAS,CAAEe,OAAQlB,EAAEqC,cAAcnC,S,EAG1CoC,iBAAmB,WACjB,OAAO,YAAI,EAAK1C,MAAMiC,UAAUX,QAAO,SAAAI,GAAO,OAC5CA,EAAQzB,KAAK0C,cAAcC,SAAS,EAAK5C,MAAMsB,Y,4CAInD,WACE,IAAMoB,EAAmB7B,KAAK6B,mBAE9B,OACE,gCACE,2CACA,cAAC,EAAD,CAAa/B,SAAUE,KAAKsB,oBAC5B,0CAEA,cAAC,EAAD,CAAQjB,SAAUL,KAAK2B,aAAclB,OAAQT,KAAKb,MAAMsB,SACxD,cAAC,EAAD,CACEE,KAAMkB,EACNZ,cAAejB,KAAKiB,uB,GAtDZV,aA6DHY,IC9Dfa,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ac35e55d.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.props.onSubmit(this.state);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <label>\n          Name\n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={this.state.name}\n            onChange={this.handleChange}\n            placeholder=\"First name, last name\"\n          />\n        </label>\n        <label>\n          Number\n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button type=\"submit\" value=\"Добавить контакт\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nexport default ContactForm;\n","import React, { Component } from 'react';\n\nclass Filter extends Component {\n  render() {\n    return (\n      <div>\n        <label>\n          Find contacts by name\n          <input\n            type=\"text\"\n            name=\"filter\"\n            value={this.props.filter}\n            onChange={this.props.onChange}\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nexport default Filter;\n","import React, { Component } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass ContactList extends Component {\n  render() {\n    return (\n      <ul>\n        {this.props.list.map(contact => {\n          const contactId = uuidv4();\n\n          return (\n            <li key={contactId}>\n              {contact.name}: {contact.number}\n              <button onClick={() => this.props.deleteContact(contact.id)}>\n                Delete contact\n              </button>\n            </li>\n          );\n        })}\n      </ul>\n    );\n  }\n}\n\nexport default ContactList;\n","import React, { Component } from 'react';\nimport ContactForm from './ContactForm';\nimport Filter from './Filter';\nimport ContactList from './ContactList';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      // { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n      // { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n      // { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n      // { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n    ],\n    filter: '',\n  };\n\n  deleteContact = id => {\n    this.setState(prevState => ({\n      contacts: prevState.contacts.filter(contact => contact.id !== id),\n    }));\n  };\n\n  formSubmitHandler = data => {\n    const { contacts } = this.state;\n    const contactId = uuidv4();\n    const alert = contacts.some(contact => contact.name === data.name);\n\n    if (alert) {\n      window.alert(`${data.name} is already in contacts`);\n      return;\n    }\n\n    this.setState(({ contacts }) => ({\n      contacts: [...contacts, { ...data, id: contactId }],\n    }));\n  };\n\n  changeFilter = e => {\n    this.setState({ filter: e.currentTarget.value });\n  };\n\n  filteredContacts = () => {\n    return [...this.state.contacts].filter(contact =>\n      contact.name.toLowerCase().includes(this.state.filter),\n    );\n  };\n\n  render() {\n    const filteredContacts = this.filteredContacts();\n\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.formSubmitHandler} />\n        <h2>Contacts</h2>\n\n        <Filter onChange={this.changeFilter} filter={this.state.filter} />\n        <ContactList\n          list={filteredContacts}\n          deleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}